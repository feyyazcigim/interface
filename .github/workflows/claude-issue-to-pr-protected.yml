name: Claude Bug Fix & Feature Implementation

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

jobs:
  check-permissions:
    runs-on: ubuntu-latest
    outputs:
      has-write-permission: ${{ steps.check.outputs.has-write-permission }}
    steps:
      - name: Check user permissions
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            
            const hasWritePermission = ['admin', 'maintain', 'write'].includes(permission.permission);
            console.log(`User ${context.actor} has permission: ${permission.permission}`);
            console.log(`Has write permission: ${hasWritePermission}`);
            
            core.setOutput('has-write-permission', hasWritePermission);

  detect-issue-type:
    needs: check-permissions
    if: needs.check-permissions.outputs.has-write-permission == 'true'
    runs-on: ubuntu-latest
    outputs:
      is-bug: ${{ steps.classify.outputs.is-bug }}
      is-feature: ${{ steps.classify.outputs.is-feature }}
      should-run: ${{ steps.classify.outputs.should-run }}
    steps:
      - name: Classify issue type
        id: classify
        uses: actions/github-script@v7
        with:
          script: |
            let shouldRun = false;
            let isBug = false;
            let isFeature = false;
            
            // Check if triggered by @claude mention
            if (context.eventName === 'issue_comment') {
              shouldRun = context.payload.comment.body.includes('@claude');
              
              // For comments, check the original issue labels and content
              const labels = context.payload.issue.labels.map(l => l.name.toLowerCase());
              isBug = labels.some(l => l.includes('bug') || l.includes('fix') || l.includes('error'));
              isFeature = labels.some(l => l.includes('feature') || l.includes('enhancement') || l.includes('implement'));
              
            } else if (context.eventName === 'issues') {
              const labels = context.payload.issue.labels.map(l => l.name.toLowerCase());
              const title = context.payload.issue.title.toLowerCase();
              const body = context.payload.issue.body?.toLowerCase() || '';
              
              // Check for template-based labels first (more reliable)
              isBug = labels.some(l => l.includes('bug'));
              isFeature = labels.some(l => l.includes('enhancement') || l.includes('feature'));
              
              // Fallback to keyword detection for non-template issues
              if (!isBug && !isFeature) {
                const bugKeywords = ['[bug]', 'bug', 'error', 'fix', 'broken', 'issue', 'problem', 'crash'];
                const featureKeywords = ['[feature]', 'feature', 'add', 'implement', 'create', 'new', 'enhancement'];
                
                isBug = bugKeywords.some(keyword => title.includes(keyword) || body.includes(keyword));
                isFeature = featureKeywords.some(keyword => title.includes(keyword) || body.includes(keyword));
              }
              
              // Check for @claude mention in checkbox format or direct mention
              shouldRun = (isBug || isFeature) && (
                body.includes('@claude please fix this bug') ||
                body.includes('@claude please implement this feature') ||
                body.includes('@claude')
              );
            }
            
            console.log(`Should run: ${shouldRun}, Is bug: ${isBug}, Is feature: ${isFeature}`);
            console.log(`Labels: ${context.payload.issue?.labels?.map(l => l.name).join(', ')}`);
            console.log(`Title: ${context.payload.issue?.title}`);
            
            core.setOutput('should-run', shouldRun);
            core.setOutput('is-bug', isBug);
            core.setOutput('is-feature', isFeature);

  claude-bug-fix:
    needs: [check-permissions, detect-issue-type]
    if: |
      needs.check-permissions.outputs.has-write-permission == 'true' &&
      needs.detect-issue-type.outputs.should-run == 'true' &&
      needs.detect-issue-type.outputs.is-bug == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Bug Fix
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: "20"
          initial_prompt: |
            You are tasked with fixing a bug in the Pinto DeFi interface application. Please:

            1. **Analyze the Bug Report**: Carefully read the issue description to understand:
               - What the expected behavior should be
               - What is actually happening (the bug)
               - Steps to reproduce the issue
               - Any error messages or logs provided

            2. **Investigate the Codebase**: 
               - Use search tools to locate relevant code files
               - Examine the code paths that might be causing the issue
               - Look for similar patterns in the codebase for consistency
               - Check for recent commits that might have introduced the bug

            3. **Implement the Fix**:
               - Make minimal, targeted changes that address the root cause
               - Follow the existing code patterns and conventions
               - Ensure type safety and proper error handling
               - Test your changes if possible (check for existing tests)

            4. **Verify the Solution**:
               - Run linting and type checking
               - Ensure the fix doesn't break existing functionality
               - Add comments if the fix requires explanation

            5. **Create a Pull Request** with:
               - Clear description of what was broken and how it's fixed
               - Reference to the original issue
               - Any testing steps for reviewers

            Focus on creating a robust, well-tested fix that follows the project's established patterns.

  claude-feature-implementation:
    needs: [check-permissions, detect-issue-type]
    if: |
      needs.check-permissions.outputs.has-write-permission == 'true' &&
      needs.detect-issue-type.outputs.should-run == 'true' &&
      needs.detect-issue-type.outputs.is-feature == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Feature Implementation
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: "30"
          initial_prompt: |
            You are tasked with implementing a new feature for the Pinto DeFi interface application. Please:

            1. **Understand the Feature Request**: Carefully analyze the issue to understand:
               - What functionality needs to be added
               - User requirements and expected behavior
               - Integration points with existing features
               - UI/UX considerations mentioned

            2. **Plan the Implementation**:
               - Use the TodoWrite tool to break down the feature into manageable tasks
               - Identify which components, hooks, and utilities need to be created/modified
               - Consider state management implications (Jotai, TanStack Query)
               - Plan for proper TypeScript typing throughout

            3. **Follow Project Patterns**:
               - Study existing similar features in the codebase
               - Use the established component patterns (Radix UI, custom components)
               - Follow the Web3 integration patterns (Wagmi hooks, contract interactions)
               - Maintain consistency with the design system and styling

            4. **Implement the Feature**:
               - Create reusable components following the project structure
               - Implement proper error handling and loading states
               - Add appropriate validation and user feedback
               - Ensure mobile responsiveness and accessibility
               - Write type-safe code with proper interfaces

            5. **Integration & Testing**:
               - Integrate with existing routing and navigation
               - Test the feature works with different wallet states
               - Run linting and type checking
               - Verify it works across different screen sizes

            6. **Create a Pull Request** with:
               - Comprehensive description of the new feature
               - Screenshots or demos if UI-related
               - Documentation of any new APIs or components
               - Testing instructions for reviewers

            Focus on creating a well-architected, maintainable feature that seamlessly integrates with the existing application.
  
  unauthorized-user:
    needs: check-permissions
    if: |
      needs.check-permissions.outputs.has-write-permission == 'false' &&
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
      )
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Comment on unauthorized access
        uses: actions/github-script@v7
        with:
          script: |
            const message = `🚫 Sorry @${context.actor}, you need write permissions to this repository to trigger Claude bug fixes and feature implementations. Please contact a repository maintainer for access.
            
            **How to use this workflow:**
            - Use the 🐛 Bug Report template and check "🤖 @claude please fix this bug"
            - Use the ✨ Feature Request template and check "🤖 @claude please implement this feature"
            - Or manually add \`@claude\` to any bug/feature issue`;
            
            if (context.eventName === 'issues') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            } else if (context.eventName === 'issue_comment') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

  unrecognized-issue:
    needs: [check-permissions, detect-issue-type]
    if: |
      needs.check-permissions.outputs.has-write-permission == 'true' &&
      github.event_name == 'issues' &&
      contains(github.event.issue.body, '@claude') &&
      needs.detect-issue-type.outputs.is-bug == 'false' &&
      needs.detect-issue-type.outputs.is-feature == 'false'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Comment on unrecognized issue type
        uses: actions/github-script@v7
        with:
          script: |
            const message = `👋 Hi @${context.actor}! I can help with bug fixes and feature implementations, but I need to understand what type of issue this is.
            
            **Please use the issue templates:**
            - 🐛 **Bug Report** template for bugs and issues
            - ✨ **Feature Request** template for new features and enhancements
            
            **Or manually add:**
            - A \`bug\` label for bug fixes
            - An \`enhancement\` or \`feature\` label for new features
            
            Once you clarify the issue type, mention \`@claude\` again and I'll get started!`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,  
              body: message
            });