/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query BeanstalkAdvancedChart($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n    createdAt\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n    cultivationFactor\n    cultivationTemperature\n    harvestableIndex\n    harvestablePods\n    harvestedPods\n    numberOfSowers\n    numberOfSows\n    podIndex\n    realRateOfReturn\n    seasonBlock\n    soil\n    soilSoldOut\n    unharvestablePods\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n    stalk\n  }\n}": typeof types.BeanstalkAdvancedChartDocument,
    "query FarmerPlots($account: ID!) {\n  farmer(id: $account) {\n    plots(\n      first: 1000\n      where: {pods_gt: \"50\", fullyHarvested: false}\n      orderBy: index\n      orderDirection: asc\n    ) {\n      beansPerPod\n      createdAt\n      creationHash\n      fullyHarvested\n      harvestablePods\n      harvestedPods\n      id\n      index\n      pods\n      season\n      source\n      sourceHash\n      preTransferSource\n      preTransferOwner {\n        id\n      }\n      updatedAt\n      updatedAtBlock\n      listing {\n        id\n      }\n    }\n  }\n}": typeof types.FarmerPlotsDocument,
    "query FarmerSiloBalances($account: ID!, $season: Int!) {\n  farmer(id: $account) {\n    deposited: deposits(\n      orderBy: season\n      orderDirection: asc\n      where: {depositedAmount_gt: 0}\n    ) {\n      season\n      stem\n      token\n      depositedAmount\n      depositedBDV\n    }\n    withdrawn: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_gt: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n    claimable: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_lte: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n  }\n}": typeof types.FarmerSiloBalancesDocument,
    "query fieldIssuedSoil($season: Int, $field_contains_nocase: String) {\n  fieldHourlySnapshots(\n    first: 1\n    orderBy: season\n    orderDirection: desc\n    where: {season: $season, field_contains_nocase: $field_contains_nocase}\n  ) {\n    issuedSoil\n    season\n    soil\n  }\n}": typeof types.FieldIssuedSoilDocument,
    "query FieldSnapshots($fieldId: Bytes!, $first: Int!) {\n  fieldHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {field_: {id: $fieldId}}\n  ) {\n    blocksToSoldOutSoil\n    caseId\n    deltaHarvestablePods\n    deltaHarvestedPods\n    deltaIssuedSoil\n    deltaNumberOfSowers\n    deltaNumberOfSows\n    deltaPodIndex\n    deltaPodRate\n    deltaRealRateOfReturn\n    deltaSoil\n    deltaSownBeans\n    deltaTemperature\n    deltaUnharvestablePods\n    harvestablePods\n    harvestedPods\n    id\n    issuedSoil\n    numberOfSowers\n    numberOfSows\n    podIndex\n    podRate\n    realRateOfReturn\n    season\n    seasonBlock\n    soil\n    soilSoldOut\n    sownBeans\n    temperature\n    unharvestablePods\n    updatedAt\n  }\n}": typeof types.FieldSnapshotsDocument,
    "query BeanstalkSeasonsTable($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n  }\n}": typeof types.BeanstalkSeasonsTableDocument,
    "query SiloSnapshots($first: Int!, $id: Bytes!) {\n  siloHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {silo_: {id: $id}}\n  ) {\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanMints\n    season\n  }\n}": typeof types.SiloSnapshotsDocument,
    "query SiloYields {\n  siloYields(\n    orderBy: season\n    orderDirection: desc\n    where: {emaWindow: ROLLING_30_DAY}\n    first: 1\n  ) {\n    beansPerSeasonEMA\n    beta\n    createdAt\n    season\n    id\n    u\n    whitelistedTokens\n    emaWindow\n    tokenAPYS {\n      beanAPY\n      stalkAPY\n      season\n      createdAt\n      token\n    }\n  }\n}": typeof types.SiloYieldsDocument,
    "query AllMarketActivity($first: Int = 1000, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(first: $first, where: {createdAt_gt: $fill_createdAt_gt}) {\n    ...PodFill\n  }\n}": typeof types.AllMarketActivityDocument,
    "query AllPodListings($first: Int = 1000, $status: MarketStatus = ACTIVE, $maxHarvestableIndex: BigInt!, $skip: Int = 0) {\n  podListings(\n    first: $first\n    skip: $skip\n    where: {status: $status, maxHarvestableIndex_gt: $maxHarvestableIndex, remainingAmount_gt: \"100000\"}\n    orderBy: index\n    orderDirection: asc\n  ) {\n    ...PodListing\n  }\n}": typeof types.AllPodListingsDocument,
    "query AllPodOrders($first: Int = 1000, $status: MarketStatus = ACTIVE, $skip: Int = 0) {\n  podOrders(\n    first: $first\n    skip: $skip\n    orderBy: createdAt\n    orderDirection: desc\n    where: {status: $status}\n  ) {\n    ...PodOrder\n  }\n}": typeof types.AllPodOrdersDocument,
    "query FarmerMarketActivity($first: Int = 1000, $account: String!, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {farmer: $account, createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {farmer: $account, createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(\n    first: $first\n    where: {and: [{createdAt_gt: $fill_createdAt_gt}, {or: [{fromFarmer: $account}, {toFarmer: $account}]}]}\n  ) {\n    ...PodFill\n  }\n}": typeof types.FarmerMarketActivityDocument,
    "fragment PodFill on PodFill {\n  id\n  placeInLine\n  amount\n  index\n  start\n  costInBeans\n  fromFarmer {\n    id\n  }\n  toFarmer {\n    id\n  }\n  listing {\n    id\n    originalAmount\n  }\n  order {\n    id\n    beanAmount\n  }\n  createdAt\n}": typeof types.PodFillFragmentDoc,
    "fragment PodListing on PodListing {\n  id\n  farmer {\n    id\n  }\n  historyID\n  index\n  start\n  mode\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxHarvestableIndex\n  minFillAmount\n  originalIndex\n  originalPlaceInLine\n  originalAmount\n  filled\n  amount\n  remainingAmount\n  filledAmount\n  fill {\n    placeInLine\n  }\n  status\n  createdAt\n  updatedAt\n  creationHash\n}": typeof types.PodListingFragmentDoc,
    "fragment PodOrder on PodOrder {\n  id\n  farmer {\n    id\n  }\n  historyID\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxPlaceInLine\n  minFillAmount\n  beanAmount\n  podAmountFilled\n  beanAmountFilled\n  status\n  createdAt\n  updatedAt\n  creationHash\n}": typeof types.PodOrderFragmentDoc,
    "query FarmerSeasonalSilo($from: Int, $to: Int, $account: String) {\n  siloHourlySnapshots(\n    where: {silo: $account, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    createdAt\n    plantedBeans\n    stalk\n    germinatingStalk\n    depositedBDV\n  }\n}": typeof types.FarmerSeasonalSiloDocument,
    "query FarmerSeasonalSiloAssetToken($from: Int, $to: Int, $siloAsset: String) {\n  siloAssetHourlySnapshots(\n    where: {siloAsset: $siloAsset, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    depositedAmount\n    depositedBDV\n    deltaDepositedBDV\n    deltaDepositedAmount\n    createdAt\n  }\n}": typeof types.FarmerSeasonalSiloAssetTokenDocument,
    "query BeanstalkSeasonalSiloActiveFarmers($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo, stalk_gt: 0}\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n  ) {\n    id\n    season\n    activeFarmers\n  }\n}": typeof types.BeanstalkSeasonalSiloActiveFarmersDocument,
    "query BeanstalkSeasonalField($from: Int, $to: Int, $field: String) {\n  fieldHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, field: $field}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    podRate\n    temperature\n    podIndex\n    harvestableIndex\n    sownBeans\n    harvestedPods\n    cultivationFactor\n    cultivationTemperature\n    issuedSoil\n    deltaSownBeans\n    createdAt\n  }\n}": typeof types.BeanstalkSeasonalFieldDocument,
    "query BeanstalkSeasonalMarketPerformance($from: Int, $to: Int) {\n  marketPerformanceSeasonals(\n    where: {season_gte: $from, season_lte: $to, valid: true}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    timestamp\n    thisSeasonTokenUsdPrices\n    usdChange\n    percentChange\n    totalUsdChange\n    totalPercentChange\n    cumulativeUsdChange\n    cumulativePercentChange\n    cumulativeTotalUsdChange\n    cumulativeTotalPercentChange\n    silo {\n      whitelistedTokens\n      dewhitelistedTokens\n    }\n  }\n}": typeof types.BeanstalkSeasonalMarketPerformanceDocument,
    "query SeasonalNewPintoSnapshots($first: Int!) {\n  seasons(first: $first, orderBy: season, orderDirection: desc) {\n    season\n    deltaBeans\n    rewardBeans\n    floodSiloBeans\n    floodFieldBeans\n    incentiveBeans\n  }\n}": typeof types.SeasonalNewPintoSnapshotsDocument,
    "query BeanstalkSeasonalSilo($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    stalk\n    avgGrownStalkPerBdvPerSeason\n    depositedBDV\n    createdAt\n  }\n}": typeof types.BeanstalkSeasonalSiloDocument,
    "query BeanstalkSeasonalWrappedDepositERC20($from: Int, $to: Int) {\n  wrappedDepositERC20HourlySnapshots(\n    where: {season_gte: $from, season_lte: $to}\n    orderBy: season\n    orderDirection: asc\n    first: 1000\n  ) {\n    id\n    season\n    supply\n    redeemRate\n    apy24h\n    apy7d\n    apy30d\n    apy90d\n    createdAt\n  }\n}": typeof types.BeanstalkSeasonalWrappedDepositErc20Document,
};
const documents: Documents = {
    "query BeanstalkAdvancedChart($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n    createdAt\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n    cultivationFactor\n    cultivationTemperature\n    harvestableIndex\n    harvestablePods\n    harvestedPods\n    numberOfSowers\n    numberOfSows\n    podIndex\n    realRateOfReturn\n    seasonBlock\n    soil\n    soilSoldOut\n    unharvestablePods\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n    stalk\n  }\n}": types.BeanstalkAdvancedChartDocument,
    "query FarmerPlots($account: ID!) {\n  farmer(id: $account) {\n    plots(\n      first: 1000\n      where: {pods_gt: \"50\", fullyHarvested: false}\n      orderBy: index\n      orderDirection: asc\n    ) {\n      beansPerPod\n      createdAt\n      creationHash\n      fullyHarvested\n      harvestablePods\n      harvestedPods\n      id\n      index\n      pods\n      season\n      source\n      sourceHash\n      preTransferSource\n      preTransferOwner {\n        id\n      }\n      updatedAt\n      updatedAtBlock\n      listing {\n        id\n      }\n    }\n  }\n}": types.FarmerPlotsDocument,
    "query FarmerSiloBalances($account: ID!, $season: Int!) {\n  farmer(id: $account) {\n    deposited: deposits(\n      orderBy: season\n      orderDirection: asc\n      where: {depositedAmount_gt: 0}\n    ) {\n      season\n      stem\n      token\n      depositedAmount\n      depositedBDV\n    }\n    withdrawn: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_gt: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n    claimable: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_lte: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n  }\n}": types.FarmerSiloBalancesDocument,
    "query fieldIssuedSoil($season: Int, $field_contains_nocase: String) {\n  fieldHourlySnapshots(\n    first: 1\n    orderBy: season\n    orderDirection: desc\n    where: {season: $season, field_contains_nocase: $field_contains_nocase}\n  ) {\n    issuedSoil\n    season\n    soil\n  }\n}": types.FieldIssuedSoilDocument,
    "query FieldSnapshots($fieldId: Bytes!, $first: Int!) {\n  fieldHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {field_: {id: $fieldId}}\n  ) {\n    blocksToSoldOutSoil\n    caseId\n    deltaHarvestablePods\n    deltaHarvestedPods\n    deltaIssuedSoil\n    deltaNumberOfSowers\n    deltaNumberOfSows\n    deltaPodIndex\n    deltaPodRate\n    deltaRealRateOfReturn\n    deltaSoil\n    deltaSownBeans\n    deltaTemperature\n    deltaUnharvestablePods\n    harvestablePods\n    harvestedPods\n    id\n    issuedSoil\n    numberOfSowers\n    numberOfSows\n    podIndex\n    podRate\n    realRateOfReturn\n    season\n    seasonBlock\n    soil\n    soilSoldOut\n    sownBeans\n    temperature\n    unharvestablePods\n    updatedAt\n  }\n}": types.FieldSnapshotsDocument,
    "query BeanstalkSeasonsTable($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n  }\n}": types.BeanstalkSeasonsTableDocument,
    "query SiloSnapshots($first: Int!, $id: Bytes!) {\n  siloHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {silo_: {id: $id}}\n  ) {\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanMints\n    season\n  }\n}": types.SiloSnapshotsDocument,
    "query SiloYields {\n  siloYields(\n    orderBy: season\n    orderDirection: desc\n    where: {emaWindow: ROLLING_30_DAY}\n    first: 1\n  ) {\n    beansPerSeasonEMA\n    beta\n    createdAt\n    season\n    id\n    u\n    whitelistedTokens\n    emaWindow\n    tokenAPYS {\n      beanAPY\n      stalkAPY\n      season\n      createdAt\n      token\n    }\n  }\n}": types.SiloYieldsDocument,
    "query AllMarketActivity($first: Int = 1000, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(first: $first, where: {createdAt_gt: $fill_createdAt_gt}) {\n    ...PodFill\n  }\n}": types.AllMarketActivityDocument,
    "query AllPodListings($first: Int = 1000, $status: MarketStatus = ACTIVE, $maxHarvestableIndex: BigInt!, $skip: Int = 0) {\n  podListings(\n    first: $first\n    skip: $skip\n    where: {status: $status, maxHarvestableIndex_gt: $maxHarvestableIndex, remainingAmount_gt: \"100000\"}\n    orderBy: index\n    orderDirection: asc\n  ) {\n    ...PodListing\n  }\n}": types.AllPodListingsDocument,
    "query AllPodOrders($first: Int = 1000, $status: MarketStatus = ACTIVE, $skip: Int = 0) {\n  podOrders(\n    first: $first\n    skip: $skip\n    orderBy: createdAt\n    orderDirection: desc\n    where: {status: $status}\n  ) {\n    ...PodOrder\n  }\n}": types.AllPodOrdersDocument,
    "query FarmerMarketActivity($first: Int = 1000, $account: String!, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {farmer: $account, createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {farmer: $account, createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(\n    first: $first\n    where: {and: [{createdAt_gt: $fill_createdAt_gt}, {or: [{fromFarmer: $account}, {toFarmer: $account}]}]}\n  ) {\n    ...PodFill\n  }\n}": types.FarmerMarketActivityDocument,
    "fragment PodFill on PodFill {\n  id\n  placeInLine\n  amount\n  index\n  start\n  costInBeans\n  fromFarmer {\n    id\n  }\n  toFarmer {\n    id\n  }\n  listing {\n    id\n    originalAmount\n  }\n  order {\n    id\n    beanAmount\n  }\n  createdAt\n}": types.PodFillFragmentDoc,
    "fragment PodListing on PodListing {\n  id\n  farmer {\n    id\n  }\n  historyID\n  index\n  start\n  mode\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxHarvestableIndex\n  minFillAmount\n  originalIndex\n  originalPlaceInLine\n  originalAmount\n  filled\n  amount\n  remainingAmount\n  filledAmount\n  fill {\n    placeInLine\n  }\n  status\n  createdAt\n  updatedAt\n  creationHash\n}": types.PodListingFragmentDoc,
    "fragment PodOrder on PodOrder {\n  id\n  farmer {\n    id\n  }\n  historyID\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxPlaceInLine\n  minFillAmount\n  beanAmount\n  podAmountFilled\n  beanAmountFilled\n  status\n  createdAt\n  updatedAt\n  creationHash\n}": types.PodOrderFragmentDoc,
    "query FarmerSeasonalSilo($from: Int, $to: Int, $account: String) {\n  siloHourlySnapshots(\n    where: {silo: $account, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    createdAt\n    plantedBeans\n    stalk\n    germinatingStalk\n    depositedBDV\n  }\n}": types.FarmerSeasonalSiloDocument,
    "query FarmerSeasonalSiloAssetToken($from: Int, $to: Int, $siloAsset: String) {\n  siloAssetHourlySnapshots(\n    where: {siloAsset: $siloAsset, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    depositedAmount\n    depositedBDV\n    deltaDepositedBDV\n    deltaDepositedAmount\n    createdAt\n  }\n}": types.FarmerSeasonalSiloAssetTokenDocument,
    "query BeanstalkSeasonalSiloActiveFarmers($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo, stalk_gt: 0}\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n  ) {\n    id\n    season\n    activeFarmers\n  }\n}": types.BeanstalkSeasonalSiloActiveFarmersDocument,
    "query BeanstalkSeasonalField($from: Int, $to: Int, $field: String) {\n  fieldHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, field: $field}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    podRate\n    temperature\n    podIndex\n    harvestableIndex\n    sownBeans\n    harvestedPods\n    cultivationFactor\n    cultivationTemperature\n    issuedSoil\n    deltaSownBeans\n    createdAt\n  }\n}": types.BeanstalkSeasonalFieldDocument,
    "query BeanstalkSeasonalMarketPerformance($from: Int, $to: Int) {\n  marketPerformanceSeasonals(\n    where: {season_gte: $from, season_lte: $to, valid: true}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    timestamp\n    thisSeasonTokenUsdPrices\n    usdChange\n    percentChange\n    totalUsdChange\n    totalPercentChange\n    cumulativeUsdChange\n    cumulativePercentChange\n    cumulativeTotalUsdChange\n    cumulativeTotalPercentChange\n    silo {\n      whitelistedTokens\n      dewhitelistedTokens\n    }\n  }\n}": types.BeanstalkSeasonalMarketPerformanceDocument,
    "query SeasonalNewPintoSnapshots($first: Int!) {\n  seasons(first: $first, orderBy: season, orderDirection: desc) {\n    season\n    deltaBeans\n    rewardBeans\n    floodSiloBeans\n    floodFieldBeans\n    incentiveBeans\n  }\n}": types.SeasonalNewPintoSnapshotsDocument,
    "query BeanstalkSeasonalSilo($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    stalk\n    avgGrownStalkPerBdvPerSeason\n    depositedBDV\n    createdAt\n  }\n}": types.BeanstalkSeasonalSiloDocument,
    "query BeanstalkSeasonalWrappedDepositERC20($from: Int, $to: Int) {\n  wrappedDepositERC20HourlySnapshots(\n    where: {season_gte: $from, season_lte: $to}\n    orderBy: season\n    orderDirection: asc\n    first: 1000\n  ) {\n    id\n    season\n    supply\n    redeemRate\n    apy24h\n    apy7d\n    apy30d\n    apy90d\n    createdAt\n  }\n}": types.BeanstalkSeasonalWrappedDepositErc20Document,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkAdvancedChart($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n    createdAt\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n    cultivationFactor\n    cultivationTemperature\n    harvestableIndex\n    harvestablePods\n    harvestedPods\n    numberOfSowers\n    numberOfSows\n    podIndex\n    realRateOfReturn\n    seasonBlock\n    soil\n    soilSoldOut\n    unharvestablePods\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n    stalk\n  }\n}"): (typeof documents)["query BeanstalkAdvancedChart($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n    createdAt\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n    cultivationFactor\n    cultivationTemperature\n    harvestableIndex\n    harvestablePods\n    harvestedPods\n    numberOfSowers\n    numberOfSows\n    podIndex\n    realRateOfReturn\n    seasonBlock\n    soil\n    soilSoldOut\n    unharvestablePods\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n    stalk\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FarmerPlots($account: ID!) {\n  farmer(id: $account) {\n    plots(\n      first: 1000\n      where: {pods_gt: \"50\", fullyHarvested: false}\n      orderBy: index\n      orderDirection: asc\n    ) {\n      beansPerPod\n      createdAt\n      creationHash\n      fullyHarvested\n      harvestablePods\n      harvestedPods\n      id\n      index\n      pods\n      season\n      source\n      sourceHash\n      preTransferSource\n      preTransferOwner {\n        id\n      }\n      updatedAt\n      updatedAtBlock\n      listing {\n        id\n      }\n    }\n  }\n}"): (typeof documents)["query FarmerPlots($account: ID!) {\n  farmer(id: $account) {\n    plots(\n      first: 1000\n      where: {pods_gt: \"50\", fullyHarvested: false}\n      orderBy: index\n      orderDirection: asc\n    ) {\n      beansPerPod\n      createdAt\n      creationHash\n      fullyHarvested\n      harvestablePods\n      harvestedPods\n      id\n      index\n      pods\n      season\n      source\n      sourceHash\n      preTransferSource\n      preTransferOwner {\n        id\n      }\n      updatedAt\n      updatedAtBlock\n      listing {\n        id\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FarmerSiloBalances($account: ID!, $season: Int!) {\n  farmer(id: $account) {\n    deposited: deposits(\n      orderBy: season\n      orderDirection: asc\n      where: {depositedAmount_gt: 0}\n    ) {\n      season\n      stem\n      token\n      depositedAmount\n      depositedBDV\n    }\n    withdrawn: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_gt: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n    claimable: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_lte: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n  }\n}"): (typeof documents)["query FarmerSiloBalances($account: ID!, $season: Int!) {\n  farmer(id: $account) {\n    deposited: deposits(\n      orderBy: season\n      orderDirection: asc\n      where: {depositedAmount_gt: 0}\n    ) {\n      season\n      stem\n      token\n      depositedAmount\n      depositedBDV\n    }\n    withdrawn: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_gt: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n    claimable: withdraws(\n      orderBy: withdrawSeason\n      orderDirection: asc\n      where: {claimableSeason_lte: $season, claimed: false}\n    ) {\n      season: withdrawSeason\n      token\n      amount\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query fieldIssuedSoil($season: Int, $field_contains_nocase: String) {\n  fieldHourlySnapshots(\n    first: 1\n    orderBy: season\n    orderDirection: desc\n    where: {season: $season, field_contains_nocase: $field_contains_nocase}\n  ) {\n    issuedSoil\n    season\n    soil\n  }\n}"): (typeof documents)["query fieldIssuedSoil($season: Int, $field_contains_nocase: String) {\n  fieldHourlySnapshots(\n    first: 1\n    orderBy: season\n    orderDirection: desc\n    where: {season: $season, field_contains_nocase: $field_contains_nocase}\n  ) {\n    issuedSoil\n    season\n    soil\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FieldSnapshots($fieldId: Bytes!, $first: Int!) {\n  fieldHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {field_: {id: $fieldId}}\n  ) {\n    blocksToSoldOutSoil\n    caseId\n    deltaHarvestablePods\n    deltaHarvestedPods\n    deltaIssuedSoil\n    deltaNumberOfSowers\n    deltaNumberOfSows\n    deltaPodIndex\n    deltaPodRate\n    deltaRealRateOfReturn\n    deltaSoil\n    deltaSownBeans\n    deltaTemperature\n    deltaUnharvestablePods\n    harvestablePods\n    harvestedPods\n    id\n    issuedSoil\n    numberOfSowers\n    numberOfSows\n    podIndex\n    podRate\n    realRateOfReturn\n    season\n    seasonBlock\n    soil\n    soilSoldOut\n    sownBeans\n    temperature\n    unharvestablePods\n    updatedAt\n  }\n}"): (typeof documents)["query FieldSnapshots($fieldId: Bytes!, $first: Int!) {\n  fieldHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {field_: {id: $fieldId}}\n  ) {\n    blocksToSoldOutSoil\n    caseId\n    deltaHarvestablePods\n    deltaHarvestedPods\n    deltaIssuedSoil\n    deltaNumberOfSowers\n    deltaNumberOfSows\n    deltaPodIndex\n    deltaPodRate\n    deltaRealRateOfReturn\n    deltaSoil\n    deltaSownBeans\n    deltaTemperature\n    deltaUnharvestablePods\n    harvestablePods\n    harvestedPods\n    id\n    issuedSoil\n    numberOfSowers\n    numberOfSows\n    podIndex\n    podRate\n    realRateOfReturn\n    season\n    seasonBlock\n    soil\n    soilSoldOut\n    sownBeans\n    temperature\n    unharvestablePods\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkSeasonsTable($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n  }\n}"): (typeof documents)["query BeanstalkSeasonsTable($from: Int, $to: Int) {\n  seasons(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {season_gte: $from, season_lte: $to}\n  ) {\n    id\n    sunriseBlock\n    rewardBeans\n    price\n    deltaBeans\n    raining\n    season\n  }\n  fieldHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {field: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    caseId\n    issuedSoil\n    deltaSownBeans\n    sownBeans\n    deltaPodDemand\n    blocksToSoldOutSoil\n    podRate\n    temperature\n    deltaTemperature\n    season\n  }\n  siloHourlySnapshots(\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n    where: {silo: \"0xd1a0d188e861ed9d15773a2f3574a2e94134ba8f\", season_gte: $from, season_lte: $to}\n  ) {\n    id\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanToMaxLpGpPerBdvRatio\n    season\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SiloSnapshots($first: Int!, $id: Bytes!) {\n  siloHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {silo_: {id: $id}}\n  ) {\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanMints\n    season\n  }\n}"): (typeof documents)["query SiloSnapshots($first: Int!, $id: Bytes!) {\n  siloHourlySnapshots(\n    first: $first\n    orderBy: season\n    orderDirection: desc\n    where: {silo_: {id: $id}}\n  ) {\n    beanToMaxLpGpPerBdvRatio\n    deltaBeanMints\n    season\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SiloYields {\n  siloYields(\n    orderBy: season\n    orderDirection: desc\n    where: {emaWindow: ROLLING_30_DAY}\n    first: 1\n  ) {\n    beansPerSeasonEMA\n    beta\n    createdAt\n    season\n    id\n    u\n    whitelistedTokens\n    emaWindow\n    tokenAPYS {\n      beanAPY\n      stalkAPY\n      season\n      createdAt\n      token\n    }\n  }\n}"): (typeof documents)["query SiloYields {\n  siloYields(\n    orderBy: season\n    orderDirection: desc\n    where: {emaWindow: ROLLING_30_DAY}\n    first: 1\n  ) {\n    beansPerSeasonEMA\n    beta\n    createdAt\n    season\n    id\n    u\n    whitelistedTokens\n    emaWindow\n    tokenAPYS {\n      beanAPY\n      stalkAPY\n      season\n      createdAt\n      token\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllMarketActivity($first: Int = 1000, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(first: $first, where: {createdAt_gt: $fill_createdAt_gt}) {\n    ...PodFill\n  }\n}"): (typeof documents)["query AllMarketActivity($first: Int = 1000, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(first: $first, where: {createdAt_gt: $fill_createdAt_gt}) {\n    ...PodFill\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllPodListings($first: Int = 1000, $status: MarketStatus = ACTIVE, $maxHarvestableIndex: BigInt!, $skip: Int = 0) {\n  podListings(\n    first: $first\n    skip: $skip\n    where: {status: $status, maxHarvestableIndex_gt: $maxHarvestableIndex, remainingAmount_gt: \"100000\"}\n    orderBy: index\n    orderDirection: asc\n  ) {\n    ...PodListing\n  }\n}"): (typeof documents)["query AllPodListings($first: Int = 1000, $status: MarketStatus = ACTIVE, $maxHarvestableIndex: BigInt!, $skip: Int = 0) {\n  podListings(\n    first: $first\n    skip: $skip\n    where: {status: $status, maxHarvestableIndex_gt: $maxHarvestableIndex, remainingAmount_gt: \"100000\"}\n    orderBy: index\n    orderDirection: asc\n  ) {\n    ...PodListing\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllPodOrders($first: Int = 1000, $status: MarketStatus = ACTIVE, $skip: Int = 0) {\n  podOrders(\n    first: $first\n    skip: $skip\n    orderBy: createdAt\n    orderDirection: desc\n    where: {status: $status}\n  ) {\n    ...PodOrder\n  }\n}"): (typeof documents)["query AllPodOrders($first: Int = 1000, $status: MarketStatus = ACTIVE, $skip: Int = 0) {\n  podOrders(\n    first: $first\n    skip: $skip\n    orderBy: createdAt\n    orderDirection: desc\n    where: {status: $status}\n  ) {\n    ...PodOrder\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FarmerMarketActivity($first: Int = 1000, $account: String!, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {farmer: $account, createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {farmer: $account, createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(\n    first: $first\n    where: {and: [{createdAt_gt: $fill_createdAt_gt}, {or: [{fromFarmer: $account}, {toFarmer: $account}]}]}\n  ) {\n    ...PodFill\n  }\n}"): (typeof documents)["query FarmerMarketActivity($first: Int = 1000, $account: String!, $listings_createdAt_gt: BigInt, $orders_createdAt_gt: BigInt, $fill_createdAt_gt: BigInt) {\n  podListings(\n    first: $first\n    where: {farmer: $account, createdAt_gt: $listings_createdAt_gt, status_not: FILLED_PARTIAL}\n  ) {\n    ...PodListing\n  }\n  podOrders(\n    first: $first\n    orderBy: createdAt\n    orderDirection: desc\n    where: {farmer: $account, createdAt_gt: $orders_createdAt_gt}\n  ) {\n    ...PodOrder\n  }\n  podFills(\n    first: $first\n    where: {and: [{createdAt_gt: $fill_createdAt_gt}, {or: [{fromFarmer: $account}, {toFarmer: $account}]}]}\n  ) {\n    ...PodFill\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PodFill on PodFill {\n  id\n  placeInLine\n  amount\n  index\n  start\n  costInBeans\n  fromFarmer {\n    id\n  }\n  toFarmer {\n    id\n  }\n  listing {\n    id\n    originalAmount\n  }\n  order {\n    id\n    beanAmount\n  }\n  createdAt\n}"): (typeof documents)["fragment PodFill on PodFill {\n  id\n  placeInLine\n  amount\n  index\n  start\n  costInBeans\n  fromFarmer {\n    id\n  }\n  toFarmer {\n    id\n  }\n  listing {\n    id\n    originalAmount\n  }\n  order {\n    id\n    beanAmount\n  }\n  createdAt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PodListing on PodListing {\n  id\n  farmer {\n    id\n  }\n  historyID\n  index\n  start\n  mode\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxHarvestableIndex\n  minFillAmount\n  originalIndex\n  originalPlaceInLine\n  originalAmount\n  filled\n  amount\n  remainingAmount\n  filledAmount\n  fill {\n    placeInLine\n  }\n  status\n  createdAt\n  updatedAt\n  creationHash\n}"): (typeof documents)["fragment PodListing on PodListing {\n  id\n  farmer {\n    id\n  }\n  historyID\n  index\n  start\n  mode\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxHarvestableIndex\n  minFillAmount\n  originalIndex\n  originalPlaceInLine\n  originalAmount\n  filled\n  amount\n  remainingAmount\n  filledAmount\n  fill {\n    placeInLine\n  }\n  status\n  createdAt\n  updatedAt\n  creationHash\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PodOrder on PodOrder {\n  id\n  farmer {\n    id\n  }\n  historyID\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxPlaceInLine\n  minFillAmount\n  beanAmount\n  podAmountFilled\n  beanAmountFilled\n  status\n  createdAt\n  updatedAt\n  creationHash\n}"): (typeof documents)["fragment PodOrder on PodOrder {\n  id\n  farmer {\n    id\n  }\n  historyID\n  pricingType\n  pricePerPod\n  pricingFunction\n  maxPlaceInLine\n  minFillAmount\n  beanAmount\n  podAmountFilled\n  beanAmountFilled\n  status\n  createdAt\n  updatedAt\n  creationHash\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FarmerSeasonalSilo($from: Int, $to: Int, $account: String) {\n  siloHourlySnapshots(\n    where: {silo: $account, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    createdAt\n    plantedBeans\n    stalk\n    germinatingStalk\n    depositedBDV\n  }\n}"): (typeof documents)["query FarmerSeasonalSilo($from: Int, $to: Int, $account: String) {\n  siloHourlySnapshots(\n    where: {silo: $account, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    createdAt\n    plantedBeans\n    stalk\n    germinatingStalk\n    depositedBDV\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FarmerSeasonalSiloAssetToken($from: Int, $to: Int, $siloAsset: String) {\n  siloAssetHourlySnapshots(\n    where: {siloAsset: $siloAsset, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    depositedAmount\n    depositedBDV\n    deltaDepositedBDV\n    deltaDepositedAmount\n    createdAt\n  }\n}"): (typeof documents)["query FarmerSeasonalSiloAssetToken($from: Int, $to: Int, $siloAsset: String) {\n  siloAssetHourlySnapshots(\n    where: {siloAsset: $siloAsset, season_gte: $from, season_lte: $to}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    depositedAmount\n    depositedBDV\n    deltaDepositedBDV\n    deltaDepositedAmount\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkSeasonalSiloActiveFarmers($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo, stalk_gt: 0}\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n  ) {\n    id\n    season\n    activeFarmers\n  }\n}"): (typeof documents)["query BeanstalkSeasonalSiloActiveFarmers($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo, stalk_gt: 0}\n    first: 1000\n    orderBy: season\n    orderDirection: desc\n  ) {\n    id\n    season\n    activeFarmers\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkSeasonalField($from: Int, $to: Int, $field: String) {\n  fieldHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, field: $field}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    podRate\n    temperature\n    podIndex\n    harvestableIndex\n    sownBeans\n    harvestedPods\n    cultivationFactor\n    cultivationTemperature\n    issuedSoil\n    deltaSownBeans\n    createdAt\n  }\n}"): (typeof documents)["query BeanstalkSeasonalField($from: Int, $to: Int, $field: String) {\n  fieldHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, field: $field}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    podRate\n    temperature\n    podIndex\n    harvestableIndex\n    sownBeans\n    harvestedPods\n    cultivationFactor\n    cultivationTemperature\n    issuedSoil\n    deltaSownBeans\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkSeasonalMarketPerformance($from: Int, $to: Int) {\n  marketPerformanceSeasonals(\n    where: {season_gte: $from, season_lte: $to, valid: true}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    timestamp\n    thisSeasonTokenUsdPrices\n    usdChange\n    percentChange\n    totalUsdChange\n    totalPercentChange\n    cumulativeUsdChange\n    cumulativePercentChange\n    cumulativeTotalUsdChange\n    cumulativeTotalPercentChange\n    silo {\n      whitelistedTokens\n      dewhitelistedTokens\n    }\n  }\n}"): (typeof documents)["query BeanstalkSeasonalMarketPerformance($from: Int, $to: Int) {\n  marketPerformanceSeasonals(\n    where: {season_gte: $from, season_lte: $to, valid: true}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    timestamp\n    thisSeasonTokenUsdPrices\n    usdChange\n    percentChange\n    totalUsdChange\n    totalPercentChange\n    cumulativeUsdChange\n    cumulativePercentChange\n    cumulativeTotalUsdChange\n    cumulativeTotalPercentChange\n    silo {\n      whitelistedTokens\n      dewhitelistedTokens\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SeasonalNewPintoSnapshots($first: Int!) {\n  seasons(first: $first, orderBy: season, orderDirection: desc) {\n    season\n    deltaBeans\n    rewardBeans\n    floodSiloBeans\n    floodFieldBeans\n    incentiveBeans\n  }\n}"): (typeof documents)["query SeasonalNewPintoSnapshots($first: Int!) {\n  seasons(first: $first, orderBy: season, orderDirection: desc) {\n    season\n    deltaBeans\n    rewardBeans\n    floodSiloBeans\n    floodFieldBeans\n    incentiveBeans\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkSeasonalSilo($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    stalk\n    avgGrownStalkPerBdvPerSeason\n    depositedBDV\n    createdAt\n  }\n}"): (typeof documents)["query BeanstalkSeasonalSilo($from: Int, $to: Int, $silo: String) {\n  siloHourlySnapshots(\n    where: {season_gte: $from, season_lte: $to, silo: $silo}\n    first: 1000\n    orderBy: season\n    orderDirection: asc\n  ) {\n    id\n    season\n    stalk\n    avgGrownStalkPerBdvPerSeason\n    depositedBDV\n    createdAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BeanstalkSeasonalWrappedDepositERC20($from: Int, $to: Int) {\n  wrappedDepositERC20HourlySnapshots(\n    where: {season_gte: $from, season_lte: $to}\n    orderBy: season\n    orderDirection: asc\n    first: 1000\n  ) {\n    id\n    season\n    supply\n    redeemRate\n    apy24h\n    apy7d\n    apy30d\n    apy90d\n    createdAt\n  }\n}"): (typeof documents)["query BeanstalkSeasonalWrappedDepositERC20($from: Int, $to: Int) {\n  wrappedDepositERC20HourlySnapshots(\n    where: {season_gte: $from, season_lte: $to}\n    orderBy: season\n    orderDirection: asc\n    first: 1000\n  ) {\n    id\n    season\n    supply\n    redeemRate\n    apy24h\n    apy7d\n    apy30d\n    apy90d\n    createdAt\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;